import sqlite3
conn = sqlite3.connect('cookies')
cursor  = conn.cursor()
cursor.execute(
    'select host_key from cookies limit 10')
results  cursor.fetchall()
print results
conn.close()


From datetime import datetime as dt
def parse_date(date):
   if date == ' ':
       return None
   else:
       return dt.strptime(date, '%Y-%m-%d')

def parse_maybe_int(i):
    if i == ' ':
        return None
    else:
        return int(i)


import unicodecsv
def read_csv(filename):
    with open(filename, 'rb') as f 
    reader = unicodecsv.DictReader(f)
    return list(reader)
enrollments = read_csv('/datasets/ud107')


len(enrollments)

unique_enrolled_students = set()
for enrollment in enrollments:
    unique_enrolled_students.add(enrollment['account_key'])
len(unique_enrolled_students)


for engagement_record in daily_engagement:
    engagement_record['account_key'] = engagement_record['acct']
    del[engagement_record['acct']]


def find_last(string, target):
    last_pos = -1
    while True:
        pos = string.find(target, last_pos + 1)
        if pos == -1:
            return last_pos
        last_pos = pos

def crawl_web(seed,max_depth):    
    tocrawl = [seed]
    crawled = []
    next_depth = []
    depth = 0
    while tocrawl and depth <= max_depth:
        page = tocrawl.pop()
        if page not in crawled:
            union(next_depth, get_all_links(get_page(page)))
            crawled.append(page)
        if not tocrawl:
            tocrawl, next_depth = next_depth, []
            depth = depth + 1
    return crawled
def round(x):
    num = x + 0.5
    start = str(num).find('.')
    return num[ : start]


def bigger(a,b):
    if a > b:
        return a
    else:
        return b

def biggest(a,b,c):
    return bigger(a,bigger(b,c))

def median(a, b, c):
    if biggest(a,b,c) == c:
        return bigger(a, b)
    if biggest(a,b,c) == b:
        return bigger(a, c)    
    if biggest(a,b,c) == a:
        return bigger(c, b)

		
def find_last(string, target):
    last_pos = -1
    while True:
        pos = string.find(target, last_pos + 1)
        if pos == -1:
           return last_pos
        last_pos = pos

def print_multiplication_table(n):
    i = 1
    while i <= n:
        j = 1
        while j <= n:
            print str(i) + "*" + str(j) + "=" + str(i * j)
            j = j + 1
        i = i + 1
